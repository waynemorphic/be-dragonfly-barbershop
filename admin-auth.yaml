openapi: 3.0.3
info:
  title: DragonFly Barbershop Backend API
  description: |-
    This is the Backend API for Dragonfly Barbershop web app
    
    It specifies the authorization and authentication endpoints
  version: 1.0.11
externalDocs:
  description: Find out more about the project
  url: https://github.com/waynemorphic/dragonfly-barbershop
servers:
  - url: /api/dragonfly-barbershop/api/v1
tags:
  - name: Authorization
    description: Authorizing a User to access the dashboard
  - name: Authentication
    description: Authenticating a User based on their credentials to access the dashboard
  - name: User Auth
    description: Operations about the User
paths:
  /admin/register:
    post:
      tags:
        - admin
      summary: Create user admin
      description: This can only be done by a non existent user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
          application/xml:
            schema:
              $ref: '#/components/schemas/Admin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Admin'
      responses:
        '200':
          description: Created user successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'
        '405':
          description: Validation exception of password length
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"
  /admin/login:
    get:
      tags:
        - admin
      summary: Logs admin user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully logged in
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"
        '405':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"
  /admin/logout:
    get:
      tags:
        - admin
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: Successfully logged out admin
  /admin/{username}:
    get:
      tags:
        - admin
      summary: Get admin user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use admin for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully fetched user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Admin'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Admin'
        '405':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"
    put:
      tags:
        - admin
      summary: Update admin user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent admin user in the web app
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
          application/xml:
            schema:
              $ref: '#/components/schemas/Admin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Admin'
      responses:
        default:
          description: Successfully updated user
    delete:
      tags:
        - admin
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"
  
components:
  schemas:
    Admin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: jojojames
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
    HttpErrorResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          description: Name of the HTTP Status
          type: string
          example: UNAUTHORIZED
        message:
          description: Description of the error thrown
          type: string
          example: User Unauthorized
  securitySchemes:
    dragonfly_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://keycloak/realm/swagger.io/oauth/authorize
          scopes:
            write:pets: modify users in your account
            read:pets: read your users
    api_key:
      type: apiKey
      name: api_key
      in: header
